module.exports = {
    env: {
        browser: true,
        es6: true,
    },
    extends: ['prettier'],
    ignorePatterns: ['!/.config'],
    overrides: [
        {
            extends: ['plugin:prettier/recommended'],
            files: ['*.ts'],
            parser: '@typescript-eslint/parser',
            parserOptions: {
                project: './tsconfig.json',
                sourceType: 'module',
                tsconfigRootDir: __dirname,
            },
            plugins: ['@typescript-eslint'],
            rules: {
                '@typescript-eslint/adjacent-overload-signatures': 'error',
                '@typescript-eslint/array-type': [
                    'error',
                    {
                        default: 'array-simple',
                    },
                ],
                '@typescript-eslint/await-thenable': 'off',
                '@typescript-eslint/ban-types': [
                    'error',
                    {
                        types: {
                            Boolean: {
                                message: 'Avoid using the `Boolean` type. Did you mean `boolean`?',
                            },
                            Function: {
                                message:
                                    'Avoid using the `Function` type. Prefer a specific function type, like `() => void`.',
                            },
                            Number: {
                                message: 'Avoid using the `Number` type. Did you mean `number`?',
                            },
                            Object: {
                                message: 'Avoid using the `Object` type. Did you mean `object`?',
                            },
                            String: {
                                message: 'Avoid using the `String` type. Did you mean `string`?',
                            },
                            Symbol: {
                                message: 'Avoid using the `Symbol` type. Did you mean `symbol`?',
                            },
                        },
                    },
                ],
                '@typescript-eslint/consistent-type-assertions': 'error',
                '@typescript-eslint/consistent-type-definitions': 'error',
                '@typescript-eslint/dot-notation': 'error',
                '@typescript-eslint/explicit-member-accessibility': [
                    'error',
                    {
                        accessibility: 'explicit',
                        overrides: {
                            constructors: 'no-public',
                        },
                    },
                ],
                '@typescript-eslint/indent': 'off',
                '@typescript-eslint/member-delimiter-style': [
                    'off',
                    {
                        multiline: {
                            delimiter: 'none',
                            requireLast: true,
                        },
                        singleline: {
                            delimiter: 'semi',
                            requireLast: false,
                        },
                    },
                ],
                '@typescript-eslint/member-ordering': [
                    'error',
                    {
                        default: [
                            'signature',
                            'public-field',
                            'private-field',
                            'constructor',
                            'public-method',
                            'private-method',
                        ],
                    },
                ],
                '@typescript-eslint/naming-convention': [
                    'error',
                    {
                        format: ['PascalCase'],
                        selector: 'class',
                    },
                    {
                        custom: {
                            match: true,
                            regex: '^I[A-Z]',
                        },
                        format: ['PascalCase'],
                        selector: 'interface',
                    },
                ],
                '@typescript-eslint/no-empty-function': 'error',
                '@typescript-eslint/no-empty-interface': 'error',
                '@typescript-eslint/no-explicit-any': 'error',
                '@typescript-eslint/no-extraneous-class': 'error',
                '@typescript-eslint/no-floating-promises': 'off',
                '@typescript-eslint/no-for-in-array': 'off',
                '@typescript-eslint/no-misused-new': 'error',
                '@typescript-eslint/no-namespace': 'error',
                '@typescript-eslint/no-non-null-assertion': 'off',
                '@typescript-eslint/no-parameter-properties': 'off',
                '@typescript-eslint/no-require-imports': 'off',
                '@typescript-eslint/no-this-alias': 'error',
                '@typescript-eslint/no-unnecessary-qualifier': 'off',
                '@typescript-eslint/no-unused-expressions': 'error',
                '@typescript-eslint/no-use-before-define': 'off',
                '@typescript-eslint/no-var-requires': 'error',
                '@typescript-eslint/prefer-for-of': 'error',
                '@typescript-eslint/prefer-function-type': 'error',
                '@typescript-eslint/prefer-namespace-keyword': 'error',
                '@typescript-eslint/promise-function-async': 'off',
                '@typescript-eslint/quotes': 'off',
                '@typescript-eslint/restrict-plus-operands': 'off',
                '@typescript-eslint/semi': ['off', null],
                '@typescript-eslint/strict-boolean-expressions': 'off',
                '@typescript-eslint/triple-slash-reference': [
                    'error',
                    {
                        lib: 'always',
                        path: 'always',
                        types: 'prefer-import',
                    },
                ],
                '@typescript-eslint/type-annotation-spacing': 'off',
                '@typescript-eslint/unified-signatures': 'error',
            },
        },
    ],
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
    },
    plugins: ['import', 'jsdoc', 'prefer-arrow'],
    rules: {
        'arrow-body-style': 'error',
        'arrow-parens': ['off', 'always'],
        'brace-style': ['off', 'off'],
        camelcase: 'error',
        'comma-dangle': 'off',
        complexity: 'off',
        'constructor-super': 'error',
        curly: ['error', 'multi'],
        'eol-last': 'off',
        eqeqeq: ['error', 'smart'],
        'guard-for-in': 'error',
        'id-blacklist': 'off',
        'id-match': 'error',
        'import/no-default-export': 'off',
        'import/no-extraneous-dependencies': 'error',
        'import/no-internal-modules': 'error',
        'import/no-unassigned-import': 'error',
        'import/order': 'error',
        'jsdoc/check-alignment': 'error',
        'jsdoc/check-indentation': 'error',
        'jsdoc/newline-after-description': 'error',
        'linebreak-style': 'off',
        'max-classes-per-file': ['error', 1],
        'max-len': 'off',
        'new-parens': 'off',
        'newline-per-chained-call': 'off',
        'no-bitwise': 'error',
        'no-caller': 'error',
        'no-cond-assign': 'error',
        'no-console': [
            'error',
            {
                allow: [
                    'warn',
                    'dir',
                    'time',
                    'timeEnd',
                    'timeLog',
                    'trace',
                    'assert',
                    'clear',
                    'count',
                    'countReset',
                    'group',
                    'groupEnd',
                    'table',
                    'debug',
                    'info',
                    'dirxml',
                    'groupCollapsed',
                    'Console',
                    'profile',
                    'profileEnd',
                    'timeStamp',
                    'context',
                ],
            },
        ],
        'no-debugger': 'error',
        'no-duplicate-case': 'error',
        'no-duplicate-imports': 'error',
        'no-empty': 'error',
        'no-eval': 'error',
        'no-extra-bind': 'error',
        'no-extra-semi': 'off',
        'no-fallthrough': 'off',
        'no-invalid-this': 'off',
        'no-irregular-whitespace': 'off',
        'no-multiple-empty-lines': 'off',
        'no-new-func': 'error',
        'no-new-wrappers': 'error',
        'no-redeclare': 'error',
        'no-return-await': 'error',
        'no-sequences': 'error',
        'no-shadow': [
            'error',
            {
                hoist: 'all',
            },
        ],
        'no-sparse-arrays': 'error',
        'no-template-curly-in-string': 'error',
        'no-throw-literal': 'error',
        'no-trailing-spaces': 'off',
        'no-undef-init': 'error',
        'no-underscore-dangle': 'error',
        'no-unsafe-finally': 'error',
        'no-unused-labels': 'error',
        'no-var': 'error',
        'no-void': 'off',
        'object-shorthand': 'error',
        'one-var': ['error', 'never'],
        'prefer-arrow/prefer-arrow-functions': 'error',
        'prefer-const': 'error',
        'prefer-object-spread': 'error',
        'quote-props': 'off',
        radix: 'error',
        'sort-keys': 'error',
        'space-before-function-paren': 'off',
        'space-in-parens': ['off', 'never'],
        'spaced-comment': [
            'error',
            'always',
            {
                markers: ['/'],
            },
        ],
        'use-isnan': 'error',
        'valid-typeof': 'off',
    },
};
